"""
 * @author: zkyuan
 * @date: 2024/12/20 15:01
 * @Description: 类型转换、深浅拷贝、可变对象、不可变对象
"""

# 1.类型转换
# int()：转换为整形，只能转纯数字（可带正负号）的字符串，若不是数字字符串会报错
# 小数转整数：小数点后的位丢掉只保留整数部分
a = 1.2
b = int(a)
print(b, type(b))
# float()：转换为小数
# str()：转化为字符串类型，任何类型都可以转为字符串类型,其他集合、元组、字典、列表转为字符串包含“{}，”等符合
# eval()：计算字符串中的有效python表达式，并返回一个对象;可以计算成列表、集合、元组、字典，但字符串必须符合相关特征
print(eval("10+10"))
s = eval("{2, 3, 'zhangkuiyuan', 'y', ('zhang', 'kuiyuan'), 'z', 'k'}")
print(type(s), s)  # <class 'set'> {2, 3, 'k', 'zhangkuiyuan', 'z', ('zhang', 'kuiyuan'), 'y'}
# tuple()：将可迭代对象转换为元组
# list()：将可迭代对象（list、str、tuple、dict、set）转换为列表
# 其中字典转换为列表只取键名，集合转换为列表会先去重再转换
# chr()：将整数转换为一个字符

# 2.深浅拷贝（针对可变对象而言）
# 赋值（数据完全共享）：指向同一块内存空间（共享空间），改变一个后，另一个也会改变
l1 = [1, 2, 3, 4, 5, [9, 9, 9]]
l2 = l1
l1[1] = 1
print(l1, l2)

# 浅拷贝（数据半共享）：会创建新的对象，拷贝第一层的数据嵌套层会指向原来的内存地址
# 引入某个或某些函数：from copy import copy, deepcopy  直接用函数名访问
import copy  # 引入整个文件，用文件名.函数名的方式访问

# 复制数据存到新的内存空间
l3 = copy.copy(l1)
l1[0] = 0
print(l1, l3)
# 查看内存地址id()
print(id(l1), id(l2), id(l3))  # 2009244293184 2009244293184 2009244610880
print(l1, l3)
l1[5][0] = 0
print(l1, l3)  # 嵌套在里面的列表一起改变了[0, 1, 3, 4, 5, [0, 9, 9]] [1, 1, 3, 4, 5, [0, 9, 9]]

# 深拷贝（数据完全不共享）：外层对象和内部元素都拷贝了一遍,存储在完全独立的空间
l4 = copy.deepcopy(l1)
l1[5][1] = 0
print(l1, l4)

# 3.可变对象和不可变对象（没有拷贝的说法）
# 可变对象：变量对应的值可以修改，但是内存地址不会发生改变（list、dict、set）
# 不可变对象：存储空间保存的数据不允许被修改（int、bool、float、complex、str、tuple）
s: str = "123"
print(id(s))
s = "333"
print(id(s))  # 修改时，会生成新的值赋给新的地址，该变量指向新地址
